grammar;

use crate::ast::*;

match {
    r"\s*" => {},
    r"//[^\n\r]*[\n\r]*" => {},
    r"/\*[^\n\r]*[\n\r]*\*/" => {},
    _
}

pub CompUnit: CompUnit = <comp_unit: CompUnit?> <func_def: FuncDef> => CompUnit{ comp_unit: Box::new(comp_unit), func_def };

FuncDef: FuncDef = {
    <func_type: FuncType> <ident: Ident> "(" <params: FuncFParams> ")" <block: Block> => {
        FuncDef{ <> }
    }
};

FuncFParams: Vec<FuncFParam> = <params: VectorValue<FuncFParam>> => <>;

FuncFParam: FuncFParam = <btype: BType> <ident: Ident> => FuncFParam{ <> };

FuncRParams: Vec<Exp> = <params: VectorValue<Exp>> => <>;

FuncType: FuncType = {
    "void" => FuncType::Void,
    "int" => FuncType::Int,
}

Decl: Decl = {
    <decl: ConstDecl> => Decl::ConstDecl(decl),
    <decl: VarDecl> => Decl::VarDecl(decl),
};

ConstDecl: ConstDecl = "const" <btype: BType> <defs: VectorValueAtLeast1<ConstDef>> ";" => ConstDecl{ <> };

VarDecl: VarDecl = <btype: BType> <defs: VectorValueAtLeast1<VarDef>> ";" => VarDecl{ <> };

VarDef: VarDef = {
    <id: Ident> => VarDef::Id(<>), 
    <id: Ident> "=" <init_val: InitVal> => VarDef::Assign(<>),
};

InitVal: InitVal = <exp: Exp> => InitVal{ <> };

VectorValueAtLeast1<T>: Vec<T> = {
    <mut v:(<T>)+> <mut e: ("," <T>)*> => {
        v.append(&mut e);
        v
    }
};

VectorValue<T>: Vec<T> = {
    <mut v:(<T>)?> <mut e: ("," <T>)*> => {
        if let Some(v) = v {
            e.insert(0, v);
        }
        e
    }
};

BType: BType = "int" => BType::Int;

ConstDef: ConstDef = <ident: Ident> "=" <const_init_val: ConstInitVal> => ConstDef{ <> };

ConstInitVal: ConstInitVal = <exp: ConstExp> => ConstInitVal::ConstExp(<>); 

ConstExp: ConstExp = <exp: Exp> => ConstExp::Exp(<>);

Block: Block = "{" <block_item:(<BlockItem>)*> "}" => Block{ <> };

BlockItem: BlockItem = {
    <decl: Decl> => BlockItem::Decl(<>),
    <stmt: Stmt> => BlockItem::Stmt(<>),
}

LVal: LVal = <ident: Ident> => LVal{ <> };

Stmt: Stmt = {
    MatchedStmt => <>,
    OpenStmt => <>,
};

MatchedStmt: Stmt = {
    <lval: LVal> "=" <exp: Exp> ";" => Stmt::Assign(<>),
    <exp: Exp?> ";" => Stmt::Exp(<>),
    <block: Block> => Stmt::Block(<>),
    "return" <exp: Exp?> ";" => Stmt::Return(<>),
    "if" "(" <cond: Exp> ")" <if_then: MatchedStmt> "else" <else_then: MatchedStmt> =>
       Stmt::If(Box::new(If { cond, if_then, else_then: Some(else_then) })),
    "while" "(" <cond: Exp> ")" <body: MatchedStmt> => Stmt::While(Box::new(While{ <> })),
    "break" ";" => Stmt::Break,
    "continue" ";" => Stmt::Continue,
}

OpenStmt: Stmt = {
    "if" "(" <cond: Exp> ")" <if_then: Stmt> =>
       Stmt::If(Box::new(If { cond, if_then, else_then: None })),
    "if" "(" <cond: Exp> ")" <if_then: MatchedStmt> "else" <else_then: OpenStmt> =>
       Stmt::If(Box::new(If { cond, if_then, else_then: Some(else_then) })),
    "while" "(" <cond: Exp> ")" <body: OpenStmt> => Stmt::While(Box::new(While{ <> })),
}

Exp: Exp = <exp:LOrExp> => Exp::LOrExp(exp);

LOrExp: LOrExp = {
    <exp: LAndExp> => LOrExp::LAndExp(exp),
    <lor_exp: LOrExp> "||" <land_exp: LAndExp> => LOrExp::LOrExp(Box::new(lor_exp), land_exp),
}

LAndExp: LAndExp = {
    <exp: EqExp> => LAndExp::EqExp(exp),
    <land_exp: LAndExp> "&&" <eq_exp: EqExp> => LAndExp::LAndExp(Box::new(land_exp), eq_exp),
}

EqExp: EqExp = {
    <rel_exp: RelExp> => EqExp::RelExp(rel_exp),
    <eq_exp: EqExp> <op: EqOp> <rel_exp: RelExp> => EqExp::EqExp(Box::new(eq_exp), op, rel_exp),
}

EqOp: EqOp = {
    "==" => EqOp::Eq,
    "!=" => EqOp::NotEq,
}

RelExp: RelExp = {
    <add_exp: AddExp> => RelExp::AddExp(add_exp),
    <rel_exp: RelExp> <op: RelOp> <add_exp: AddExp> => RelExp::RelExp(Box::new(rel_exp), op, add_exp),
}

RelOp: RelOp = {
    "<" => RelOp::Lt,
    ">" => RelOp::Gt,
    "<=" => RelOp::Le,
    ">=" => RelOp::Ge,
}

AddExp: AddExp = {
    <exp:MulExp> => AddExp::MulExp(exp),
    <add_exp: AddExp> <op:AddOp> <mul_exp: MulExp> => AddExp::AddAndMul(Box::new(add_exp), op, mul_exp),
};

AddOp: AddOp = {
    "+" => AddOp::Add,
    "-" => AddOp::Sub,
};

MulExp: MulExp = {
     <exp:UnaryExp> =>  MulExp::UnaryExp(exp),
     <mul_exp: MulExp> <op: MulOp> <unary_exp: UnaryExp> => MulExp::MulAndUnary(Box::new(mul_exp), op, unary_exp)
}

MulOp: MulOp = {
    "*" => MulOp::Mul,
    "/" => MulOp::Div,
    "%" => MulOp::Mod,
}

PrimaryExp: PrimaryExp = {
    "(" <e:Exp> ")" => PrimaryExp::Expression(Box::new(e)),
    <lval: LVal> => PrimaryExp::LVal(<>),
    <n:Number> => PrimaryExp::Number(n),
};

UnaryExp: UnaryExp = {
    <p:PrimaryExp> => UnaryExp::PrimaryExp(p),
    <op:UnaryOp> <u:UnaryExp> => UnaryExp::UnaryOp(op, Box::new(u)),
     <ident: Ident> "(" <args: FuncRParams> ")" => {
       UnaryExp::Call(FuncCall { ident, args })
     },
};

UnaryOp: UnaryOp = {
    "+" => UnaryOp::Add,
    "-" => UnaryOp::Minus,
    "!" => UnaryOp::Not,
};

Number: i32 = <num: IntConst> => <>;

Ident: String = r"[_a-zA-Z][_a-zA-Z0-9]*" => <>.to_string();

IntConst: i32 = {
    r"[1-9][0-9]*" => i32::from_str_radix(<>, 10).unwrap(),
    r"0[0-7]*" => i32::from_str_radix(<>, 8).unwrap(),
    r"0[xX][0-9a-fA-F]+" => i32::from_str_radix(&<>[2..], 16).unwrap(),
}