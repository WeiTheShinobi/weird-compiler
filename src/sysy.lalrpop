grammar;

use crate::ast::*;

match {
    r"\s*" => {},
    r"//[^\n\r]*[\n\r]*" => {},
    _
}

pub CompUnit: CompUnit = <func_def: FuncDef> => CompUnit{ <> };

FuncDef: FuncDef = {
    <func_type: FuncType> <ident: Ident> "(" ")" <block: Block> => {
        FuncDef{ <> }
    }
}

FuncType: FuncType = "int" => FuncType::Int;

Block: Block = "{" <stmt: Stmt> "}" => Block{ <> };

Stmt: Stmt = {
    "return" <e:Exp> ";" => Stmt::Return(e),
};

Exp: Exp = {
    <exp:UnaryExp> => Exp::UnaryExp(exp),
};

AddExp: AddExp = {
    <exp:UnaryExp> => AddExp::UnaryExp(exp),
    <addExp: AddExp> <op:AddOp> <mulExp: MulExp> => AddExp::AddAndMul(addExp, op, mulExp),
}

AddOp: AddOp = {
    "+" => AddOp::Add,
    "-" => AddOp::Minus,
};

PrimaryExp: PrimaryExp = {
    "(" <e:Exp> ")" => PrimaryExp::Expression(Box::new(e)),
    <n:Number> => PrimaryExp::Number(n),
};

UnaryExp: UnaryExp = {
    <p:PrimaryExp> => UnaryExp::PrimaryExp(p),
    <op:UnaryOp> <u:UnaryExp> => UnaryExp::UnaryOp(op, Box::new(u)),
};

UnaryOp: UnaryOp = {
    "+" => UnaryOp::Add,
    "-" => UnaryOp::Minus,
    "!" => UnaryOp::Not,
};

Number: i32 = <num: IntConst> => <>;

Ident: String = r"[_a-zA-Z][_a-zA-Z0-9]*" => <>.to_string();

IntConst: i32 = {
    r"[1-9][0-9]*" => i32::from_str_radix(<>, 10).unwrap(),
    r"0[0-7]*" => i32::from_str_radix(<>, 8).unwrap(),
    r"0[xX][0-9a-fA-F]+" => i32::from_str_radix(&<>[2..], 16).unwrap(),
}