grammar;

use crate::ast::*;

match {
    r"\s*" => {},
    r"//[^\n\r]*[\n\r]*" => {},
    _
}

pub CompUnit: CompUnit = <func_def: FuncDef> => CompUnit{ <> };

FuncDef: FuncDef = {
    <func_type: FuncType> <ident: Ident> "(" ")" <block: Block> => {
        FuncDef{ <> }
    }
}

FuncType: FuncType = "int" => FuncType::Int;

Block: Block = "{" <stmt: Stmt> "}" => Block{ <> };

Stmt: Stmt = {
    "return" <e:Exp> ";" => Stmt::Return(e),
};

Exp: Exp = {
    <exp:LOrExp> => Exp::LOrExp(exp),
};

LOrExp: LOrExp = {
    <exp: LAndExp> => LOrExp::LAndExp(exp),
    <lor_exp: LOrExp> "||" <land_exp: LAndExp> => LOrExp::LOrExp(Box::new(lor_exp), land_exp),
}

LAndExp: LAndExp = {
    <exp: EqExp> => LAndExp::EqExp(exp),
    <land_exp: LAndExp> "&&" <eq_exp: EqExp> => LAndExp::LAndExp(Box::new(land_exp), eq_exp),
}

EqExp: EqExp = {
    <rel_exp: RelExp> => EqExp::RelExp(rel_exp),
    <eq_exp: EqExp> <op: EqOp> <rel_exp: RelExp> => EqExp::EqExp(Box::new(eq_exp), op, rel_exp),
}

EqOp: EqOp = {
    "==" => EqOp::Eq,
    "!=" => EqOp::NotEq,
}

RelExp: RelExp = {
    <add_exp: AddExp> => RelExp::AddExp(add_exp),
    <rel_exp: RelExp> <op: RelOp> <add_exp: AddExp> => RelExp::RelExp(Box::new(rel_exp), op, add_exp),
}

RelOp: RelOp = {
    "<" => RelOp::Lt,
    ">" => RelOp::Gt,
    "<=" => RelOp::Le,
    ">=" => RelOp::Gt,
}

AddExp: AddExp = {
    <exp:MulExp> => AddExp::MulExp(exp),
    <add_exp: AddExp> <op:AddOp> <mul_exp: MulExp> => AddExp::AddAndMul(Box::new(add_exp), op, mul_exp),
};

AddOp: AddOp = {
    "+" => AddOp::Add,
    "-" => AddOp::Sub,
};

MulExp: MulExp = {
     <exp:UnaryExp> =>  MulExp::UnaryExp(exp),
     <mul_exp: MulExp> <op: MulOp> <unary_exp: UnaryExp> => MulExp::MulAndUnary(Box::new(mul_exp), op, unary_exp)
}

MulOp: MulOp = {
    "*" => MulOp::Mul,
    "/" => MulOp::Div,
    "%" => MulOp::Mod,
}

PrimaryExp: PrimaryExp = {
    "(" <e:Exp> ")" => PrimaryExp::Expression(Box::new(e)),
    <n:Number> => PrimaryExp::Number(n),
};

UnaryExp: UnaryExp = {
    <p:PrimaryExp> => UnaryExp::PrimaryExp(p),
    <op:UnaryOp> <u:UnaryExp> => UnaryExp::UnaryOp(op, Box::new(u)),
};

UnaryOp: UnaryOp = {
    "+" => UnaryOp::Add,
    "-" => UnaryOp::Minus,
    "!" => UnaryOp::Not,
};

Number: i32 = <num: IntConst> => <>;

Ident: String = r"[_a-zA-Z][_a-zA-Z0-9]*" => <>.to_string();

IntConst: i32 = {
    r"[1-9][0-9]*" => i32::from_str_radix(<>, 10).unwrap(),
    r"0[0-7]*" => i32::from_str_radix(<>, 8).unwrap(),
    r"0[xX][0-9a-fA-F]+" => i32::from_str_radix(&<>[2..], 16).unwrap(),
}